directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateExerciseInput is used for create Exercise object.
Input was generated by ent.
"""
input CreateExerciseInput {
  name: String!
  image: String
  howTo: String
  musclesGroupIDs: [ID!]
}
"""
CreateMusclesGroupInput is used for create MusclesGroup object.
Input was generated by ent.
"""
input CreateMusclesGroupInput {
  name: String!
  image: String!
  exerciseIDs: [ID!]
}
"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
  text: String!
  createdAt: Time
  status: TodoStatus
  priority: Int
  childIDs: [ID!]
  parentID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Exercise implements Node {
  id: ID!
  name: String!
  image: String
  howTo: String
  musclesGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for MusclesGroups returned from the connection."""
    orderBy: MusclesGroupOrder

    """Filtering options for MusclesGroups returned from the connection."""
    where: MusclesGroupWhereInput
  ): MusclesGroupConnection!
}
"""A connection to a list of items."""
type ExerciseConnection {
  """A list of edges."""
  edges: [ExerciseEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ExerciseEdge {
  """The item at the end of the edge."""
  node: Exercise
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Exercise connections"""
input ExerciseOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Exercises."""
  field: ExerciseOrderField!
}
"""Properties by which Exercise connections can be ordered."""
enum ExerciseOrderField {
  ID
}
"""
ExerciseWhereInput is used for filtering Exercise objects.
Input was generated by ent.
"""
input ExerciseWhereInput {
  not: ExerciseWhereInput
  and: [ExerciseWhereInput!]
  or: [ExerciseWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """image field predicates"""
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String
  """how_to field predicates"""
  howTo: String
  howToNEQ: String
  howToIn: [String!]
  howToNotIn: [String!]
  howToGT: String
  howToGTE: String
  howToLT: String
  howToLTE: String
  howToContains: String
  howToHasPrefix: String
  howToHasSuffix: String
  howToIsNil: Boolean
  howToNotNil: Boolean
  howToEqualFold: String
  howToContainsFold: String
  """muscles_groups edge predicates"""
  hasMusclesGroups: Boolean
  hasMusclesGroupsWith: [MusclesGroupWhereInput!]
}
type MusclesGroup implements Node {
  id: ID!
  name: String!
  image: String!
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exercises returned from the connection."""
    orderBy: ExerciseOrder

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
}
"""A connection to a list of items."""
type MusclesGroupConnection {
  """A list of edges."""
  edges: [MusclesGroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MusclesGroupEdge {
  """The item at the end of the edge."""
  node: MusclesGroup
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for MusclesGroup connections"""
input MusclesGroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MusclesGroups."""
  field: MusclesGroupOrderField!
}
"""Properties by which MusclesGroup connections can be ordered."""
enum MusclesGroupOrderField {
  ID
}
"""
MusclesGroupWhereInput is used for filtering MusclesGroup objects.
Input was generated by ent.
"""
input MusclesGroupWhereInput {
  not: MusclesGroupWhereInput
  and: [MusclesGroupWhereInput!]
  or: [MusclesGroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """image field predicates"""
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageEqualFold: String
  imageContainsFold: String
  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "todo/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exercises returned from the connection."""
    orderBy: ExerciseOrder

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
  musclesGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for MusclesGroups returned from the connection."""
    orderBy: MusclesGroupOrder

    """Filtering options for MusclesGroups returned from the connection."""
    where: MusclesGroupWhereInput
  ): MusclesGroupConnection!
  todos(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Todos returned from the connection."""
    orderBy: TodoOrder

    """Filtering options for Todos returned from the connection."""
    where: TodoWhereInput
  ): TodoConnection!
}
"""The builtin Time type"""
scalar Time
type Todo implements Node {
  id: ID!
  text: String!
  createdAt: Time!
  status: TodoStatus!
  priority: Int!
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Todos returned from the connection."""
    orderBy: TodoOrder

    """Filtering options for Todos returned from the connection."""
    where: TodoWhereInput
  ): TodoConnection!
  parent: Todo
}
"""A connection to a list of items."""
type TodoConnection {
  """A list of edges."""
  edges: [TodoEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge."""
  node: Todo
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Todo connections"""
input TodoOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Todos."""
  field: TodoOrderField!
}
"""Properties by which Todo connections can be ordered."""
enum TodoOrderField {
  ID
}
"""TodoStatus is enum for the field status"""
enum TodoStatus @goModel(model: "todo/ent/todo.Status") {
  IN_PROGRESS
  COMPLETED
}
"""
TodoWhereInput is used for filtering Todo objects.
Input was generated by ent.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """text field predicates"""
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """status field predicates"""
  status: TodoStatus
  statusNEQ: TodoStatus
  statusIn: [TodoStatus!]
  statusNotIn: [TodoStatus!]
  """priority field predicates"""
  priority: Int
  priorityNEQ: Int
  priorityIn: [Int!]
  priorityNotIn: [Int!]
  priorityGT: Int
  priorityGTE: Int
  priorityLT: Int
  priorityLTE: Int
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [TodoWhereInput!]
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [TodoWhereInput!]
}
"""
UpdateExerciseInput is used for update Exercise object.
Input was generated by ent.
"""
input UpdateExerciseInput {
  name: String
  image: String
  clearImage: Boolean
  howTo: String
  clearHowTo: Boolean
  addMusclesGroupIDs: [ID!]
  removeMusclesGroupIDs: [ID!]
  clearMusclesGroups: Boolean
}
"""
UpdateMusclesGroupInput is used for update MusclesGroup object.
Input was generated by ent.
"""
input UpdateMusclesGroupInput {
  name: String
  image: String
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
}
"""
UpdateTodoInput is used for update Todo object.
Input was generated by ent.
"""
input UpdateTodoInput {
  text: String
  status: TodoStatus
  priority: Int
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
  parentID: ID
  clearParent: Boolean
}
