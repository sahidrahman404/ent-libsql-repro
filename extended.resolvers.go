package todo

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"todo/ent"
	"todo/ent/schema/pksuid"
)

// CreateMusclesGroup is the resolver for the createMusclesGroup field.
func (r *createExerciseInputResolver) CreateMusclesGroup(ctx context.Context, obj *ent.CreateExerciseInput, data []*ent.CreateMusclesGroupInput) error {
	c := ent.FromContext(ctx)
	builders := make([]*ent.MusclesGroupCreate, len(data))
	for i := range data {
		builders[i] = c.MusclesGroup.Create().SetInput(*data[i])
	}
	musclesGroups, err := c.MusclesGroup.CreateBulk(builders...).Save(ctx)
	if err != nil {
		fmt.Println(err)
		return err
	}
	ids := make([]pksuid.ID, len(musclesGroups))
	for i := range musclesGroups {
		ids[i] = musclesGroups[i].ID
	}
	obj.MusclesGroupIDs = append(obj.MusclesGroupIDs, ids...)
	return nil
}

// CreateChildren is the resolver for the createChildren field.
func (r *createTodoInputResolver) CreateChildren(ctx context.Context, obj *ent.CreateTodoInput, data []*ent.CreateTodoInput) error {
	c := ent.FromContext(ctx)
	builders := make([]*ent.TodoCreate, len(data))
	for i := range data {
		builders[i] = c.Todo.Create().SetInput(*data[i])
	}
	todos, err := c.Todo.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return err
	}
	ids := make([]pksuid.ID, len(todos))
	for i := range todos {
		ids[i] = todos[i].ID
	}
	obj.ChildIDs = append(obj.ChildIDs, ids...)
	return nil
}
