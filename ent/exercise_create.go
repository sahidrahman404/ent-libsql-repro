// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"todo/ent/exercise"
	"todo/ent/musclesgroup"
	"todo/ent/schema/pksuid"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExerciseCreate is the builder for creating a Exercise entity.
type ExerciseCreate struct {
	config
	mutation *ExerciseMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *ExerciseCreate) SetName(s string) *ExerciseCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetImage sets the "image" field.
func (ec *ExerciseCreate) SetImage(s string) *ExerciseCreate {
	ec.mutation.SetImage(s)
	return ec
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ec *ExerciseCreate) SetNillableImage(s *string) *ExerciseCreate {
	if s != nil {
		ec.SetImage(*s)
	}
	return ec
}

// SetHowTo sets the "how_to" field.
func (ec *ExerciseCreate) SetHowTo(s string) *ExerciseCreate {
	ec.mutation.SetHowTo(s)
	return ec
}

// SetNillableHowTo sets the "how_to" field if the given value is not nil.
func (ec *ExerciseCreate) SetNillableHowTo(s *string) *ExerciseCreate {
	if s != nil {
		ec.SetHowTo(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExerciseCreate) SetID(pk pksuid.ID) *ExerciseCreate {
	ec.mutation.SetID(pk)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *ExerciseCreate) SetNillableID(pk *pksuid.ID) *ExerciseCreate {
	if pk != nil {
		ec.SetID(*pk)
	}
	return ec
}

// AddMusclesGroupIDs adds the "muscles_groups" edge to the MusclesGroup entity by IDs.
func (ec *ExerciseCreate) AddMusclesGroupIDs(ids ...pksuid.ID) *ExerciseCreate {
	ec.mutation.AddMusclesGroupIDs(ids...)
	return ec
}

// AddMusclesGroups adds the "muscles_groups" edges to the MusclesGroup entity.
func (ec *ExerciseCreate) AddMusclesGroups(m ...*MusclesGroup) *ExerciseCreate {
	ids := make([]pksuid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ec.AddMusclesGroupIDs(ids...)
}

// Mutation returns the ExerciseMutation object of the builder.
func (ec *ExerciseCreate) Mutation() *ExerciseMutation {
	return ec.mutation
}

// Save creates the Exercise in the database.
func (ec *ExerciseCreate) Save(ctx context.Context) (*Exercise, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExerciseCreate) SaveX(ctx context.Context) *Exercise {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExerciseCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExerciseCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExerciseCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := exercise.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExerciseCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Exercise.name"`)}
	}
	return nil
}

func (ec *ExerciseCreate) sqlSave(ctx context.Context) (*Exercise, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pksuid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExerciseCreate) createSpec() (*Exercise, *sqlgraph.CreateSpec) {
	var (
		_node = &Exercise{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(exercise.Table, sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(exercise.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Image(); ok {
		_spec.SetField(exercise.FieldImage, field.TypeString, value)
		_node.Image = &value
	}
	if value, ok := ec.mutation.HowTo(); ok {
		_spec.SetField(exercise.FieldHowTo, field.TypeString, value)
		_node.HowTo = &value
	}
	if nodes := ec.mutation.MusclesGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   exercise.MusclesGroupsTable,
			Columns: exercise.MusclesGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musclesgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExerciseCreateBulk is the builder for creating many Exercise entities in bulk.
type ExerciseCreateBulk struct {
	config
	builders []*ExerciseCreate
}

// Save creates the Exercise entities in the database.
func (ecb *ExerciseCreateBulk) Save(ctx context.Context) ([]*Exercise, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exercise, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExerciseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExerciseCreateBulk) SaveX(ctx context.Context) []*Exercise {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExerciseCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExerciseCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
