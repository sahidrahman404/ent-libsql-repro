// Code generated by ent, DO NOT EDIT.

package exercise

import (
	"todo/ent/schema/pksuid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the exercise type in the database.
	Label = "exercise"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldHowTo holds the string denoting the how_to field in the database.
	FieldHowTo = "how_to"
	// EdgeMusclesGroups holds the string denoting the muscles_groups edge name in mutations.
	EdgeMusclesGroups = "muscles_groups"
	// Table holds the table name of the exercise in the database.
	Table = "exercises"
	// MusclesGroupsTable is the table that holds the muscles_groups relation/edge. The primary key declared below.
	MusclesGroupsTable = "exercise_muscles_groups"
	// MusclesGroupsInverseTable is the table name for the MusclesGroup entity.
	// It exists in this package in order to avoid circular dependency with the "musclesgroup" package.
	MusclesGroupsInverseTable = "muscles_groups"
)

// Columns holds all SQL columns for exercise fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldImage,
	FieldHowTo,
}

var (
	// MusclesGroupsPrimaryKey and MusclesGroupsColumn2 are the table columns denoting the
	// primary key for the muscles_groups relation (M2M).
	MusclesGroupsPrimaryKey = []string{"exercise_id", "muscles_group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pksuid.ID
)

// OrderOption defines the ordering options for the Exercise queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByHowTo orders the results by the how_to field.
func ByHowTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHowTo, opts...).ToFunc()
}

// ByMusclesGroupsCount orders the results by muscles_groups count.
func ByMusclesGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMusclesGroupsStep(), opts...)
	}
}

// ByMusclesGroups orders the results by muscles_groups terms.
func ByMusclesGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMusclesGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMusclesGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MusclesGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MusclesGroupsTable, MusclesGroupsPrimaryKey...),
	)
}
